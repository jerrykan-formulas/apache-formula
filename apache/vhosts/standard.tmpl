{# Define default values here so the template below can just focus on layout #}
{%- from "apache/map.jinja" import apache with context -%}
{%- set sitename = site.get('ServerName', id) -%}

{%- macro _directive(key, value, indents=1) -%}
    {{- '\n' ~ ' ' * 4 * indents -}}{{ key }}  {{ value }}
{%- endmacro -%}

{%- macro non_false_directive(key, value, indents=1) -%}
    {%- if value != False -%}
        {{- _directive(key, value, indents) -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro if_directive(key, value, indents=1) -%}
    {%- if value -%}
        {{- _directive(key, value, indents) -}}
    {%- endif -%}
{%- endmacro -%}

{%- set vals = {
    'interfaces': site.get('interface', '*').split(),
    'port': site.get('port', '80'),

    'ServerName': sitename,
    'ServerAlias': site.get('ServerAlias', 'www.{0}'.format(sitename)),
    'ServerAdmin': site.get('ServerAdmin', 'webmaster@{0}'.format(sitename)),

    'LogLevel': site.get('LogLevel', False),
    'ErrorLog': site.get('ErrorLog', '{0}/{1}-error.log'.format(map.logdir, sitename)),
    'LogFormat': site.get('LogFormat', '"%h %l %u %t \\\"%r\\\" %>s %O"'),
    'CustomLog': site.get('CustomLog', '{0}/{1}-access.log'.format(map.logdir, sitename)),

    'UseCanonicalName': site.get('UseCanonicalName'),
    'DirectoryIndex': site.get('DirectoryIndex'),
    'AllowEncodedSlashes': site.get('AllowEncodedSlashes'),

    'DocumentRoot': site.get('DocumentRoot', '{0}/{1}'.format(map.wwwdir, sitename)),
    'VirtualDocumentRoot': site.get('VirtualDocumentRoot'),

    'Directory_default': '{0}/{1}'.format(map.wwwdir, sitename),
    'Directory': {
        'Options': '-Indexes +FollowSymLinks',
        'Order': 'allow,deny',
        'Allow': 'from all',
        'Require': 'all granted',
        'AllowOverride': 'None',
    },
    'Location': {
        'Order': 'allow,deny',
        'Allow': 'from all',
        'Require': 'all granted',
    },
} -%}

<VirtualHost {%- for iface in vals.interfaces %} {{iface}}:{{ vals.port }}{% endfor -%}>
    ServerName   {{ vals.ServerName }}
    {{- non_false_directive('ServerAlias', vals.ServerAlias) }}
    {{- non_false_directive('ServerAdmin', vals.ServerAdmin) }}

    {{- '\n' -}}

    {{- non_false_directive('LogLevel ', vals.LogLevel) }}
    {{- non_false_directive('ErrorLog ', vals.ErrorLog) }}
    {{- non_false_directive('CustomLog', vals.CustomLog ~ '  ' ~ vals.LogFormat) }}

    {{- '\n' -}}

    {{- non_false_directive('DocumentRoot', vals.DocumentRoot) }}
    {{- if_directive('VirtualDocumentRoot', vals.VirtualDocumentRoot) }}

    {{- '\n' -}}

    {{- if_directive('UseCanonicalName', vals.UseCanonicalName) }}
    {{- if_directive('AllowEncodedSlashes', vals.AllowEncodedSlashes) }}
    {{- if_directive('DirectoryIndex', vals.DirectoryIndex) }}

    {%- if site.get('SSLCertificateFile') %}{{ '\n' }}
    SSLEngine  On
    SSLCertificateFile     {{ site.SSLCertificateFile }}
    {{- if_directive('SSLCertificateKeyFile', site.get('SSLCertificateKeyFile')) }}
    {{- if_directive('SSLCertificateChainFile', site.get('SSLCertificateChainFile')) }}
    {%- endif %}

    {%- if site.get('Alias') %}{{ '\n' }}
    {%- for loc, path in site.get('Alias', {})|dictsort %}
    Alias  {{ loc }}  {{ path }}
    {%- endfor %}
    {%- endif %}

    {%- if site.get('Directory') %}
    {%- for path, dir in site.get('Directory', {})|dictsort -%}{{ '\n' }}
    {%- set dvals = {
        'Options': dir.get('Options', vals.Directory.Options),
        'Order': dir.get('Order', vals.Directory.Order),
        'Allow': dir.get('Allow', vals.Directory.Allow),
        'Require': dir.get('Require', vals.Directory.Require),
        'AllowOverride': dir.get('AllowOverride', vals.Directory.AllowOverride),
        'Dav': dir.get('Dav', False),
    } -%}

    {%- if path == 'default' %}{% set path = vals.Directory_default %}{% endif %}
    <Directory "{{ path }}">
        {{- if_directive('Options', dvals.get('Options'), indents=2) }}
        {%- if apache.use_require %}
        {%-   set requires = dvals.Require if dvals.Require is list else [dvals.Require] -%}
        {%-   for require in requires %}
        Require  {{ require }}
        {%-   endfor %}
        {%- else %}
            {{- non_false_directive('Order', dvals.get('Order'), indents=2) }}
            {{- non_false_directive('Allow', dvals.get('Allow'), indents=2) }}
        {%- endif %}
        {{- non_false_directive('AllowOverride', dvals.get('AllowOverride'), indents=2) }}
        {{- non_false_directive('Dav', dvals.get('Dav') != False and 'On', indents=2) }}

        {%- if dir.get('Formula_Append') %}{{ '\n' }}
        {{ dir.Formula_Append|indent(8) }}
        {% endif %}
    </Directory>
    {%- endfor %}
    {%- endif %}

    {%- if site.get('Location') %}
    {%- for path, loc in site.get('Location', {}).items() %}{{ '\n' }}
    {%- set lvals = {
        'Order': loc.get('Order', vals.Location.Order),
        'Allow': loc.get('Allow', vals.Location.Allow),
        'Require': loc.get('Require', vals.Location.Require),
        'Dav': loc.get('Dav', False),
    } %}
    <Location "{{ path }}">
        {%- if loc.get('AuthOptions') %}
        {%- for option, value in loc.AuthOptions|dictsort %}
        {{ option }}  {{ value }}
        {%- endfor %}{{ '\n' }}
        {%- endif %}

        {%- if apache.use_require %}
        {%-   set requires = lvals.Require if lvals.Require is list else [lvals.Require] -%}
        {%-   for require in requires %}
        Require  {{ require }}
        {%-   endfor %}
        {%- else %}
            {{- non_false_directive('Order', lvals.Order, indents=2) }}
            {{- non_false_directive('Allow', lvals.Allow, indents=2) }}
        {%- endif %}
        {{- non_false_directive('Dav', lvals.get('Dav') != False and 'On', indents=2) }}

        {%- if loc.get('Formula_Append') %}{{ '\n' }}
        {{ loc.Formula_Append|indent(8) }}
        {%- endif %}
    </Location>
    {%- endfor %}
    {%- endif %}

    {%- if site.get('Formula_Append') %}{{ '\n' }}
    {{ site.Formula_Append|indent(4) }}
    {%- endif %}
</VirtualHost>
